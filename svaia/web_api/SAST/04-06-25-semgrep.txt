                   
                   
┌─────────────────┐
│ 3 Code Findings │
└─────────────────┘
                         
  [36m[22m[24m  app.py[0m
     ❱ [1mpython.flask.web.flask-cookie-secure-false.flask-cookie-secure-false[0m
          Detected a cookie where the `Secure` flag is either missing or disabled. The `Secure` cookie flag 
          instructs the browser to forbid sending the cookie over an insecure HTTP request. Set the `Secure`
          flag to `true` so the cookie will only be sent over HTTPS. If this wasn't intentional, it's       
          recommended to set the Secure flag to true so the cookie will always be sent over HTTPS. A secure 
          default approach would consist of creating a custom response class, overriding the `set_cookie`   
          method to set this flag to `True` by default, setting the `response_class` attribute of your Flask
          app to use the custom response class, setting the flag to False on a case-by-case basis only when 
          necessary.                                                                                        
          Details: https://sg.run/v8reW                                                                     
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mTrue
          192┆ response.set_cookie('access_token', access_token, httponly=True, secure=False,
               samesite='Strict')                                                            
                                 
  [36m[22m[24m  app_backend.py[0m
    ❯❱ [1mpython.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret[0m
          A secret is hard-coded in the application. Secrets stored in source code, such as credentials,  
          identifiers, and other types of sensitive data, can be leaked and used by internal or external  
          malicious actors. Use environment variables to securely provide credentials and other secrets or
          retrieve them from a secure vault or Hardware Security Module (HSM).                            
          Details: https://sg.run/1D4w                                                                    
                                                                                                          
           45┆ engine = create_engine(
           46┆     "mysql+mysqlconnector://cj:cj@localhost:3306/svaiadb",
           47┆     echo=True
           48┆ )
   
     ❱ [1mpython.flask.web.flask-cookie-secure-false.flask-cookie-secure-false[0m
          Detected a cookie where the `Secure` flag is either missing or disabled. The `Secure` cookie flag 
          instructs the browser to forbid sending the cookie over an insecure HTTP request. Set the `Secure`
          flag to `true` so the cookie will only be sent over HTTPS. If this wasn't intentional, it's       
          recommended to set the Secure flag to true so the cookie will always be sent over HTTPS. A secure 
          default approach would consist of creating a custom response class, overriding the `set_cookie`   
          method to set this flag to `True` by default, setting the `response_class` attribute of your Flask
          app to use the custom response class, setting the flag to False on a case-by-case basis only when 
          necessary.                                                                                        
          Details: https://sg.run/v8reW                                                                     
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mTrue
          156┆ response.set_cookie('access_token', access_token, httponly=True, secure=False ,
               samesite='Strict')                                                             
